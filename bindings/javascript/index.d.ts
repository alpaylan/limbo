/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface OpenDatabaseOptions {
  readonly?: boolean
  fileMustExist?: boolean
  timeout?: number
}
export interface PragmaOptions {
  simple: boolean
}
export interface RunResult {
  changes: number
  lastInsertRowid: number
}
export declare class Database {
  memory: boolean
  readonly: boolean
  open: boolean
  name: string
  constructor(path: string, options?: OpenDatabaseOptions | undefined | null)
  prepare(sql: string): Statement
  pragma(pragmaName: string, options?: PragmaOptions | undefined | null): unknown
  backup(): void
  serialize(): void
  function(): void
  aggregate(): void
  table(): void
  loadExtension(path: string): void
  exec(sql: string): void
  close(): void
}
export declare class Statement {
  source: string
  get(args?: Array<unknown> | undefined | null): unknown
  run(args?: Array<unknown> | undefined | null): RunResult
  iterate(args?: Array<unknown> | undefined | null): IteratorStatement
  all(args?: Array<unknown> | undefined | null): unknown
  pluck(pluck?: boolean | undefined | null): void
  static expand(): void
  raw(raw?: boolean | undefined | null): void
  static columns(): void
  bind(args?: Array<unknown> | undefined | null): Statement
}
export declare class IteratorStatement { }
